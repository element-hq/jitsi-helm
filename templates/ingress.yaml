{{ if $.Values.haproxy.ingressEnable -}}
{{ if eq $.Values.haproxy.ingress.class "alb" -}}
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress
  namespace: {{ $.Values.namespace }}
  annotations:
    alb.ingress.kubernetes.io/group.name: {{ $.Values.haproxy.ingress.albGroup }}
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    {{ if $.Values.haproxy.ingress.tlsEnable }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    {{ else }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    {{ end }}

  labels:
    scope: jitsi

spec:
  rules:
  - host: {{ $.Values.haproxy.ingress.host }}
    http:
      paths:
      {{ if $.Values.haproxy.ingress.tlsEnable -}}
      - path: /*
        backend:
          serviceName: ssl-redirect
          servicePort: use-annotation
      {{ end -}}
      - path: /*
        backend:
          serviceName: haproxy
          servicePort: 8080
{{ else -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    {{- if $.Values.haproxy.certmanager.issuer }}
    cert-manager.io/cluster-issuer: {{ $.Values.haproxy.certmanager.issuer }}
    {{- end }}
    kubernetes.io/ingress.class: {{ $.Values.haproxy.ingress.class }}
  name: ingress
  namespace: {{ $.Values.namespace }}

  labels:
    scope: jitsi

spec:
  rules:
  - host: {{ $.Values.haproxy.ingress.host }}
    http:
      paths:
      - backend:
          service:
            name: haproxy
            port:
              number: 8080
        path: /
        pathType: Prefix
  {{ if $.Values.haproxy.ingress.tlsEnable -}}
  tls:
  - hosts:
    - {{ $.Values.haproxy.ingress.host }}
    secretName: jitsi-tls
  {{ end -}}
{{ end -}}
{{ end -}}
