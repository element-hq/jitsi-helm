{{ if (gt ($.Values.shardCount | int) 1) -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    k8s-app: {{ $.Values.haproxy.name }}
  {{- with $.Values.haproxy.extraLabels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
    checksum/config: {{ tpl (.Files.Get "configs/haproxy/haproxy.cfg") . | sha256sum }}
  {{- with $.Values.haproxy.extraAnnotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  name: {{ $.Values.haproxy.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: {{ $.Values.haproxy.name }}
  serviceName: {{ $.Values.haproxy.name }}
  template:
    metadata:
      labels:
        k8s-app: {{ $.Values.haproxy.name }}
        {{- with $.Values.haproxy.extraLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ tpl (.Files.Get "configs/haproxy/haproxy.cfg") . | sha256sum }}
      {{- with $.Values.haproxy.extraAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with $.Values.haproxy.extraPodSpec }}
      {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- if (($.Values.global).serviceAccount) }}
      serviceAccountName: {{ (($.Values.global).serviceAccount) }}
    {{- else }}
      automountServiceAccountToken: false
    {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - {{ $.Values.haproxy.name }}
            topologyKey: topology.kubernetes.io/zone
      containers:
      - env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: {{ $.Values.haproxy.image }}
        name: haproxy
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        - containerPort: 1024
          name: peering
        readinessProbe:
          httpGet:
            path: /stats
            port: metrics
        startupProbe:
          httpGet:
            path: /stats
            port: metrics
        readinessProbe:
          httpGet:
            path: /stats
            port: metrics
        volumeMounts:
        - mountPath: /usr/local/etc/haproxy/haproxy.cfg
          name: haproxy-config
          subPath: haproxy.cfg
      {{- with $.Values.haproxy.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.haproxy.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with $.Values.haproxy.extraContainerSpec }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - configMap:
          items:
          - key: haproxy.cfg
            path: haproxy.cfg
          name: haproxy-config
        name: haproxy-config
    {{- with $.Values.haproxy.extraVolumes }}
      {{- toYaml . | nindent 6 }}
    {{- end }}
{{ end -}}
